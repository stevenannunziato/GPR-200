// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
//  -> BUFFER A TAB (scene)

//------------------------------------------------------------
// RENDERING FUNCTIONS

// rotating cube map
color4 cubeMapEffect(in sViewport vp, in sRay ray)
{
    // sampler type: samplerCube
    // use ray direction for cube sample position
    vec3 cubeLoc = ray.direction.xyz;
    
    /* Mouse rotations: currently unused
    // define the desired rotation based on mouse
    vec2 mouseDir = iMouse.zw - iMouse.xy;
    // correct sensitivity
    mouseDir *= 0.005;
    // reset rotation when not clicking
    mouseDir *= float(iMouse.z > 0.0);
    vec3 rot = vec3(-mouseDir.y, mouseDir.x - 1.57, 0.0);
	*/
    // rotate based on time
    vec3 rot = vec3(0.0, iTime * -0.25, 0.0);
    
    // define rotation matrices
    // x
    mat3 rotX = mat3(1.0, 0.0, 0.0,					// column 1
                     0.0, cos(rot.x), sin(rot.x),	// column 2
                     0.0, -sin(rot.x), cos(rot.x));	// column 3
    // y
    mat3 rotY = mat3(cos(rot.y), 0.0, -sin(rot.y),	// column 1
                     0.0, 1.0, 0.0,					// column 2
                     sin(rot.y), 0, cos(rot.y));	// column 3
    // z
    mat3 rotZ = mat3(cos(rot.z), sin(rot.z), 0.0,	// column 1
                     -sin(rot.z), cos(rot.z), 0,	// column 2
                     0.0, 0.0, 1.0);				// column 3
    // apply rotations
    cubeLoc = rotX * cubeLoc;
    cubeLoc = rotY * cubeLoc;
    cubeLoc = rotZ * cubeLoc;
    
    return texture(iChannel0, cubeLoc);
}

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray)
{
    // test inputs
    //return color4(ray.direction.xyz == vp.viewportPoint.xyz); // pass
    //return color4(lengthSq(vp.viewportPoint.xy) >= 0.25); // pass
    //return color4(vp.uv, 0.0, 0.0);
    //return color4(vp.ndc, 0.0, 0.0);
    //return asPoint(sBasis(vp.viewportPoint.xy, -vp.viewportPoint.z));
    
    return cubeMapEffect(vp, ray);
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray);
}
