#version 450

uniform float uTime;
uniform float uDeltaTime;

// going off of here so far:
// https://developer.arm.com/documentation/100587/0100/compute-shaders/compute-shaders-example
struct SimulationData
{
		vec4 position;
        vec4 velocity;
};

struct VertexDisplayData
{
		vec4 position;
        vec4 color;
};

// buffer for managing particles in VS
layout(std430, binding = 0) writeonly buffer destBuffer
{
        VertexDisplayData data[];
} ParticleOut;

// 
layout(std430, binding = 1) buffer calcBuffer
{
        SimulationData data[];
} ParticleCalc;

layout (local_size_x = 1024, local_size_y = 1, local_size_z = 1) in;

// utility functions ------------------------------------------------------------

// hueshift function adapted from user mAlk:
// https://www.shadertoy.com/view/MsjXRt
vec4 hueshift(in vec3 Color, in float Shift)
{
    vec3 P = vec3(0.55735) * dot(vec3(0.55735), Color);
    vec3 U = Color - P;
    vec3 V = cross(vec3(0.55735), U);
    
    Color = U * cos(Shift * 6.2832) + V * sin(Shift * 6.2832) + P;
    return vec4(Color, 1.0);
}

// https://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl
float rand(vec2 co){
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

// simplex noise adapted from here:
// https://www.shadertoy.com/view/XsX3zB
/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */
vec3 random3(vec3 c) {
	float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));
	vec3 r;
	r.z = fract(512.0*j);
	j *= .125;
	r.x = fract(512.0*j);
	j *= .125;
	r.y = fract(512.0*j);
	return r-0.5;
}
/* skew constants for 3d simplex functions */
const float F3 =  0.3333333;
const float G3 =  0.1666667;
/* 3d simplex noise */
float simplex3d(vec3 p) {
	 /* 1. find current tetrahedron T and it's four vertices */
	 /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */
	 /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/
	 
	 /* calculate s and x */
	 vec3 s = floor(p + dot(p, vec3(F3)));
	 vec3 x = p - s + dot(s, vec3(G3));
	 
	 /* calculate i1 and i2 */
	 vec3 e = step(vec3(0.0), x - x.yzx);
	 vec3 i1 = e*(1.0 - e.zxy);
	 vec3 i2 = 1.0 - e.zxy*(1.0 - e);
	 	
	 /* x1, x2, x3 */
	 vec3 x1 = x - i1 + G3;
	 vec3 x2 = x - i2 + 2.0*G3;
	 vec3 x3 = x - 1.0 + 3.0*G3;
	 
	 /* 2. find four surflets and store them in d */
	 vec4 w, d;
	 
	 /* calculate surflet weights */
	 w.x = dot(x, x);
	 w.y = dot(x1, x1);
	 w.z = dot(x2, x2);
	 w.w = dot(x3, x3);
	 
	 /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */
	 w = max(0.6 - w, 0.0);
	 
	 /* calculate surflet components */
	 d.x = dot(random3(s), x);
	 d.y = dot(random3(s + i1), x1);
	 d.z = dot(random3(s + i2), x2);
	 d.w = dot(random3(s + 1.0), x3);
	 
	 /* multiply d by w^4 */
	 w *= w;
	 w *= w;
	 d *= w;
	 
	 /* 3. return the sum of the four surflets */
	 return dot(d, vec4(52.0));
}
/* const matrices for 3d rotation */
const mat3 rot1 = mat3(-0.37, 0.36, 0.85,-0.14,-0.93, 0.34,0.92, 0.01,0.4);
const mat3 rot2 = mat3(-0.55,-0.39, 0.74, 0.33,-0.91,-0.24,0.77, 0.12,0.63);
const mat3 rot3 = mat3(-0.71, 0.52,-0.47,-0.08,-0.72,-0.68,-0.7,-0.45,0.56);
/* directional artifacts can be reduced by rotating each octave */
float simplex3d_fractal(vec3 m) {
    return   0.5333333*simplex3d(m*rot1)
			+0.2666667*simplex3d(2.0*m*rot2)
			+0.1333333*simplex3d(4.0*m*rot3)
			+0.0666667*simplex3d(8.0*m);
}

// returns a vec3 with pseudo-random noise function
vec4 customNoise(in vec4 point)
{
	float x = simplex3d(point.xyz);
	float y = simplex3d(point.xyz + 15.2);
	float z = simplex3d(point.xyz + 4.8);
	return vec4(x, y, z, point.w);
}


// simulation functions -------------------------------------------------------------------------------

void checkLifetime(inout vec4 prevPos, inout vec4 prevVel, in uint index) {

	float maxLifetime = 5.0;
	float r = rand(vec2(index)) * 20.0;
	
	/*float t = index;
	float c1 = 7.0;
	float c2 = 9.0;
	float c3 = 6.0;
	float x = sin(c3 * t) * cos(c1 * t);
	float y = sin(c1 * t) * cos(c3 * t);
	float z = sin(c2 * t) * cos(c1 * t);
	vec3 defaultPosition = vec3(x, y, z);*/
	//vec3 defaultPosition = vec3(cos(index) * 2.0, 0.0, sin(index) * 2.0);
	//vec3 defaultPosition = vec3(r * 0.1);
	vec3 defaultPosition = vec3(cos(index), 0.0, sin(index));
	
	
	prevPos.w += uDeltaTime;
	if (prevPos.w > maxLifetime + r) {
		// reset particle
		prevPos = vec4(defaultPosition, r);
		prevVel = vec4(0.0);
	}
	
}

// vector field for calculating particle velocity
vec4 radialVectorField(in vec4 inPos)
{
	
	vec4 result = inPos;
	return result;

}
// vector field for calculating particle velocity
vec4 flameVectorField(in vec4 inPos)
{
	
	float x = -inPos.x * inPos.y;
	float y = 2.0;
	float z = -inPos.z * inPos.y;
	
	return vec4(x, y, z, inPos.w);

}

// Apply velocity to a particle's position
void calculatePosition(in vec4 inPosition, inout vec4 velocity, out vec4 outPosition)
{
	
	outPosition = vec4(inPosition.xyz + velocity.xyz, inPosition.w);
	
}

void main()
{
	
	// get simulation data from last frame -------------------------------------------------
	uint storePos = gl_GlobalInvocationID.x;
	
	// simulate each particle one more step ------------------------------------------------
	
	// get simulation data from last frame
	vec4 prevPos = ParticleCalc.data[storePos].position;
	vec4 prevVel = ParticleCalc.data[storePos].velocity;
	vec4 newPos;
	
	// handle particle lifetime
	checkLifetime(prevPos, prevVel, storePos);
	
	// set new velocity and position
	// set velocity based on vector field
	prevVel = flameVectorField(prevPos) * 0.002;
	// add noise to velocity
	prevVel += customNoise(prevPos) * vec4(0.005, 0.005, 0.005, 1.0);
	// ensure w component is 1
	ParticleCalc.data[storePos].velocity.w = 1.0;
	// add velocity to position
	calculatePosition(prevPos, prevVel, newPos);
	ParticleCalc.data[storePos].position = newPos;
	
	// write particle position and color to output buffer -----------------------------------
	ParticleOut.data[storePos].position = ParticleCalc.data[storePos].position;
	
	//ParticleOut.data[storePos].velocity = vec4(1.0, 1.0, 1.0, 1.0);
	float t = mod((uTime * 1.0) + storePos, 250.0);

	
	// color
	ParticleOut.data[storePos].color = hueshift(vec3(1.0, 0.0, 0.0), t * 0.0005);
}