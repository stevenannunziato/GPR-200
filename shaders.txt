// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
// Modified by Steven Annunziato

// asPoint: promote a 3D vector into a 4D vector representing a point (w=1)
//    point: input 3D vector
vec4 asPoint(in vec3 point)
{
    return vec4(point, 1.0);
}

// asOffset: promote a 3D vector into a 4D vector representing an offset (w=0)
//    offset: input 3D vector
vec4 asOffset(in vec3 offset)
{
    return vec4(offset, 0.0);
}

// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec3 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in float focalLength,
                  in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2), z = -f
    viewport = vec3(ndc * vec2(aspect, 1.0) * (viewportHeight * 0.5), -focalLength);
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec3 eyePosition, in vec3 viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = asOffset(viewport - eyePosition);
}

// structure for a point light
struct sPointLight
{
    vec4 center;
    vec4 color;
    float intensity;
};
void initPointLight(out sPointLight light, in vec3 center, in vec4 color, in float intensity)
{
    light.center = asPoint(center);
    light.color = color;
    light.intensity = intensity;
}

// structure for a sphere
struct sSphere
{
    vec4 position;
    float radius;
};
// give sphere some default values
void initSphere(out sSphere sphere, in vec3 position, in float radius)
{
    sphere.position = asPoint(position);
    sphere.radius = radius;
}

float lengthSquared(vec2 x) {
    return dot(x, x);
}

// optimized power increase functions
float square(float n)
{
    return n * n;
}
float pow64(float n)
{
    n *= n; // power = 2
    n *= n; // power = 4
    n *= n; // power = 8
    n *= n; // power = 16
    n *= n; // power = 32
    n *= n; // power = 64
    return n;
}
float pow256(float n)
{
    n *= n; // power = 2
    n *= n; // power = 4
    n *= n; // power = 8
    n *= n; // power = 16
    n *= n; // power = 32
    n *= n; // power = 64
    n *= n; // power = 128
    n *= n; // power = 256
    return n;
}

// polar to cartesian function
vec2 polarToCartesian(in float radius, in float theta)
{
    return vec2(radius * cos(theta), radius * sin(theta));
}

// calculations for diffuse light scattering
float calcDiffuse(in sPointLight light, in vec3 position, in vec3 normal, out vec3 lightVector)
{
    // lambertian reflectance
    //lightVector = light.center.xyz - position;
    float lightDist = sqrt(dot(lightVector, lightVector));
    float invDist = 1.0 / lightDist;
    lightVector *= invDist; // light vector is now normalized
    float diffuseCoefficient = max(0.0, dot(normal, lightVector));
    // attenuation (light falloff)
    float invIntensity = 1.0 / light.intensity;
    float attenuatedIntensity = 1.0 / (1.0 + (lightDist * invIntensity) + square(lightDist * invIntensity));
    return diffuseCoefficient * attenuatedIntensity;
}
// calculations for specular highlights
float phongSpecular(in vec3 lightVector, in vec3 viewVector, in vec3 normal)
{
    // phong reflectance
    vec3 reflectedLight = reflect(-lightVector, normal);
    float specularCoefficient = max(0.0, dot(viewVector, reflectedLight));
    return pow64(specularCoefficient);
}
float blinnPhongSpecular(in vec3 lightVector, in vec3 viewVector, in vec3 normal)
{
    // blinn-phong reflectance
    vec3 temp = lightVector + viewVector;
    float invLength = 1.0 / sqrt(dot(temp, temp));
    vec3 halfwayVector = temp * invLength;
    float specularCoefficient = max(0.0, dot(normal, halfwayVector));
    return pow256(specularCoefficient);   
}

// cel shading
void celShade(in float numShades, out vec4 finalColor)
{
    // method of cel shading adapted from here:
    // https://www.shadertoy.com/view/ldlfRf
    float brightness = (finalColor.r + finalColor.g + finalColor.b) * 0.6;
    float shade = floor(brightness * numShades);
    float multFactor = shade / (numShades * brightness);
    finalColor *= multFactor;
}

// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin)
{	
    // WORLD
    // objects in world
    sSphere sphere1;
    initSphere(sphere1, vec3(0.0, 0.0, -4.0), 0.5);
    // values for animation
    float intensity = 20.0;
    float yVal = 8.0 * sin(iTime * 0.25);
    float radius = 8.0;
    float scaledTime = iTime * 1.0;
    vec2 pos1 = polarToCartesian(radius, scaledTime);
    vec2 pos2 = polarToCartesian(radius, scaledTime + 1.57);
    vec2 pos3 = polarToCartesian(radius, scaledTime + 3.14);
    vec2 pos4 = polarToCartesian(radius, scaledTime + 4.71);
    // light definitions
    sPointLight light1;
    initPointLight(light1, vec3(pos1.x, yVal, pos1.y - 4.0), vec4(1.0, 0.0, 0.0, 1.0), intensity);
    sPointLight light2;
    initPointLight(light2, vec3(pos2.x, yVal, pos2.y - 4.0), vec4(0.0, 1.0, 0.0, 1.0), intensity * 1.75);
    sPointLight light3;
    initPointLight(light3, vec3(pos3.x, yVal, pos3.y - 4.0), vec4(0.0, 0.0, 1.0, 1.0), intensity * 0.8);
    sPointLight light4;
    initPointLight(light4, vec3(pos4.x, yVal, pos4.y - 4.0), vec4(1.0, 0.0, 1.0, 1.0), intensity * 0.5);
    // cel shading lights
    sPointLight celLight1;
    initPointLight(celLight1, vec3(pos1.x, yVal, pos1.y - 4.0), vec4(1.0, 1.0, 1.0, 1.0), intensity);
    // array of lights to keep things organized
    sPointLight lights[4];
    lights[0] = light1;
    lights[1] = light2;
    lights[2] = light3;
    lights[3] = light4;
    // ------------------
    //lights[0] = celLight1;
    
    // determine if the ray lies inside a circle on the screen
    vec3 dp;
    dp.xy = rayDirection.xy - sphere1.position.xy;
    float lSq = lengthSquared(dp.xy);
    float rSq = sphere1.radius * sphere1.radius;
    
    // inside the circle
    if (lSq <= rSq)
    {
        
        // Project z-component of the sphere now that we are inside the circle
        dp.z = rSq - lSq;
        
        vec3 position = sphere1.position.xyz + vec3(dp.x, dp.y, sqrt(dp.z));
        vec3 normal = (position - sphere1.position.xyz) / sphere1.radius; // length is known so we can contextually optimize
        vec3 viewVector = -position / sqrt(dot(position, position));
        
        // SHADING
        // light and color properties
        vec4 diffuseColor = vec4(0.8, 0.8, 1.0, 1.0);
        float ambientIntensity = 0.1;
        vec4 ambientColor = vec4(1.0, 0.9, 0.9, 1.0);
        vec4 specularHighlightColor = vec4(1.0, 0.4, 0.8, 1.0);
        
        // final calculation
        vec4 finalAmbient = ambientIntensity * ambientColor;
        vec4 summedColor = vec4(0.0);
        for (int i = lights.length() - 1; i >= 0; --i) {
            
            vec3 lightVector = lights[i].center.xyz - position;
            
            // first calculate diffuse intensity
			float diffuseIntensity = calcDiffuse(lights[i], position, normal, lightVector);
            
            // next calculate specular intensity
            float specularIntensity = blinnPhongSpecular(lightVector, viewVector, normal);
            //specularIntensity = 0.0;
            
            // final calculation
            summedColor += (diffuseIntensity * diffuseColor + specularIntensity * specularHighlightColor) * lights[i].color;
        }
        vec4 finalColor = finalAmbient + summedColor;
        
        // cel shading
        //celShade(4.0, finalColor);
        
        return vec4(finalColor);
    }
    
	// BACKGROUND
	//const vec3 warm = vec3(0.6, 0.35, 0.7), cool = vec3(0.2, 0.4, 0.8);
    const vec3 warm = vec3(0.7, 0.6, 0.6), cool = vec3(0.6, 0.6, 1.0);
	return vec4(mix(warm, cool, rayDirection.y), 1.0);
    //return vec4(0.2);
}

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec3 viewport;
    vec2 ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    fragColor = vec4(0.0);
    
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
    	             viewportHeight, focalLength,
    	             fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin, vec3(0.0), viewport);
    
    fragColor += calcColor(rayDirection, rayOrigin);
}
