#version 450

#ifdef GL_ES
precision highp float;
#endif

layout (location = 0) out vec4 rtFragColor;

in vec2 vTexCoord;

uniform vec2 uResolution;
// get scene pass
uniform sampler2D uTex; // represented by integer (0)

// https://www.shadertoy.com/view/wsGXRm
float lookup(vec2 p, float dx, float dy)
{
    vec2 uv = (p.xy + vec2(dx, dy)) / uResolution;
    vec4 c = texture(uTex, uv.xy);
	
	// return as luma
    return 0.2126 * c.r + 0.7152 * c.g + 0.0722 * c.b;
}

void main()
{
	// calculate uv and sampler
	//vec2 uv = gl_FragCoord.xy / uResolution;
	vec2 uv = vTexCoord * 0.5 + 0.5;
	//vec4 col = texture(uTex, uv);

	// test
	//rtFragColor = vec4(1.0, 0.5, 0.0, 1.0);
	//rtFragColor = vec4(uv, 1.0, 1.0);
	//rtFragColor = col;
	
	// https://www.shadertoy.com/view/wsGXRm
	vec2 p = gl_FragCoord.xy;
    
	// sobel edge detection
    float gx;
    gx += -1.0 * lookup(p, -1.0, -1.0);
    gx += -2.0 * lookup(p, -1.0,  0.0);
    gx += -1.0 * lookup(p, -1.0,  1.0);
    gx +=  1.0 * lookup(p,  1.0, -1.0);
    gx +=  2.0 * lookup(p,  1.0,  0.0);
    gx +=  1.0 * lookup(p,  1.0,  1.0);
    
    float gy;
    gy += -1.0 * lookup(p, -1.0, -1.0);
    gy += -2.0 * lookup(p,  0.0, -1.0);
   	gy += -1.0 * lookup(p,  1.0, -1.0);

    gy +=  1.0 * lookup(p, -1.0,  1.0);
    gy +=  2.0 * lookup(p,  0.0,  1.0);
    gy +=  1.0 * lookup(p,  1.0,  1.0);
    
	// hack: use g^2 to conceal noise in the video
    float g = gx*gx + gy*gy;
    float g2 = g * 0.5;
    
    // determine final outline color
    vec4 sobelColor = vec4(g2, 0.0, 0.0, 0.99);
    // add sobel on top of sampled image from scene pass
    vec4 col = texture(uTex, uv);
    col = sobelColor;
    
    rtFragColor = col;
	
}