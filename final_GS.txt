#version 330 core

uniform float uTime;

layout (triangles) in;
layout (triangle_strip, max_vertices = 12) out;

uniform mat4 projMat;

in vec4 color[];

out vec4 finalColor;

// information from here:
// https://learnopengl.com/Advanced-OpenGL/Geometry-Shader
void main()
{
	vec4 position = gl_in[0].gl_Position;
	finalColor = color[0];
	//finalColor = vec4(1.0);
	
	// quad attributes
	float quadSize = 0.2;
	
	/*gl_Position = projMat * (position + vec4(-quadSize, -quadSize, 0.0, 0.0));    // 1:bottom-left
    EmitVertex();   
    gl_Position = projMat * (position + vec4(+quadSize, -quadSize, 0.0, 0.0));    // 2:bottom-right
    EmitVertex();
    gl_Position = projMat * (position + vec4(-quadSize,  +quadSize, 0.0, 0.0));    // 3:top-left
    EmitVertex();
    gl_Position = projMat * (position + vec4(+quadSize,  +quadSize, 0.0, 0.0));    // 4:top-right
    EmitVertex();
    
    EndPrimitive();*/
    
    
    gl_Position = gl_in[0].gl_Position + vec4(-quadSize, -quadSize, 0.0, 0.0);    // 1:bottom-left
    EmitVertex();   
    gl_Position = gl_in[0].gl_Position + vec4(quadSize, -quadSize, 0.0, 0.0);    // 2:bottom-right
    EmitVertex();
    gl_Position = gl_in[0].gl_Position + vec4(-quadSize, quadSize, 0.0, 0.0);    // 3:top-left
    EmitVertex();
    gl_Position = gl_in[0].gl_Position + vec4(quadSize, quadSize, 0.0, 0.0);    // 4:top-right
    EmitVertex();
    
    EndPrimitive();
	
}

void GenerateLine(int i)
{
    gl_Position = gl_in[i].gl_Position;
    EmitVertex();
    gl_Position = gl_in[i].gl_Position + vec4(1.0) * MAGNITUDE * (sin(uTime) + 2.0);
    EmitVertex();
    
    EndPrimitive();
}

/*void main()
{
    GenerateLine(0); // first vertex normal
    //GenerateLine(1); // second vertex normal
    //GenerateLine(2); // third vertex normal
}*/