#version 330 core

layout (points) in;
layout (triangle_strip, max_vertices = 12) out;

// uniforms
uniform mat4 projMat;
uniform vec2 uResolution;

in vec4 color[];

out vec4 finalColor;
out vec2 texCoord;

// information from here:
// https://learnopengl.com/Advanced-OpenGL/Geometry-Shader
void main()
{
	vec4 position = gl_in[0].gl_Position;
	finalColor = color[0];
	//finalColor = vec4(1.0);
	
	// quad attributes
	float aspectRatio = uResolution.y / uResolution.x;
	vec2 quadSize = vec2(0.2, 0.3);
    
    gl_Position = position + vec4(-quadSize.x * aspectRatio, -quadSize.y, 0.0, 0.0);    // 1:bottom-left
    texCoord = vec2(0.0, 0.0);
    EmitVertex();
    
    gl_Position = position + vec4(quadSize.x * aspectRatio, -quadSize.y, 0.0, 0.0);    // 2:bottom-right
    texCoord = vec2(1.0, 0.0);
    EmitVertex();
    
    gl_Position = position + vec4(-quadSize.x * aspectRatio, quadSize.y, 0.0, 0.0);    // 3:top-left
    texCoord = vec2(0.0, 1.0);
    EmitVertex();
    
    gl_Position = position + vec4(quadSize.x * aspectRatio, quadSize.y, 0.0, 0.0);    // 4:top-right
    texCoord = vec2(1.0, 1.0);
    EmitVertex();
    
    EndPrimitive();
	
}