// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
// Modified by Steven Annunziato
//  -> BUFFER C TAB (scene)

//------------------------------------------------------------
// RENDERING FUNCTIONS


color4 gaussianBlurVert(in sCoord fragCoord, in sampler2D tex, in vec2 resolution)
{
 	// cache inverse resolution
    vec2 invResolution = 1.0 / resolution;
    
    // define gaussian convolution kernel 5x5
    const int rowSize = 7;
    const float invRowSize = 1.0 / float(rowSize);
    const float invSum = 1.0 / 64.0;
    float kernel[rowSize] = float[rowSize](1.0, 6.0, 15.0, 20.0, 15.0, 6.0, 1.0);
    
    // sum pixel values around current pixel
    color4 sum;
    for (int i = rowSize - 1; i >= 0; --i)
    {
        // get appropriate UV value and color for current pixel
        float curX = fragCoord.x;
        float curY = fragCoord.y - floor(float(rowSize) * 0.5) + float(i);
        vec2 uv = vec2(curX, curY) * invResolution;
        sum += texture(tex, uv) * kernel[i];
    }
    sum *= invSum;
    return sum;
    
}

//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // setup
    // test UV for input image
    sCoord uv = fragCoord / iChannelResolution[0].xy;
    
    // corner sample
    //sCoord uvUpRight = (fragCoord + 0.5) / iChannelResolution[0].xy;
    // texture space: [0, 1)
    // texture is 100x100 px, resInv = 0.01, 0.01
    // represents pixel size in texture space
    sDCoord pixelSizeInTextureSpace = 1.0 / iChannelResolution[0].xy;
    sCoord uvUpRight = (fragCoord + 0.5) * pixelSizeInTextureSpace;
    
    // TESTING
    // set iChannel0 to 'Misc/Buffer A' and fetch sample
    //fragColor = texture(iChannel0, uv);
    
 	fragColor = gaussianBlurVert(fragCoord, iChannel0, iChannelResolution[0].xy);
    
    // test
    //fragColor = vec4(fract(fragCoord.x));
}
